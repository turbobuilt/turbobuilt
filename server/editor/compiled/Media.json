{"js":"\n\n    const importedModulesTurbobuilt = {\n        \"FileInput.vue\":(function(){const { defineComponent: _defineComponent } = Vue;\nconst { toDisplayString: _toDisplayString, openBlock: _openBlock, createElementBlock: _createElementBlock, createCommentVNode: _createCommentVNode, createTextVNode: _createTextVNode, unref: _unref } = Vue;\nconst _hoisted_1 = { key: 0 };\nconst _hoisted_2 = { key: 1 };\nconst { computed, onMounted, onUnmounted, ref } = Vue;\nconst fullComponent = /* @__PURE__ */ _defineComponent({\n  __name: \"FileInput\",\n  props: {\n    label: { type: String, required: true },\n    accept: { type: String, required: false },\n    loading: { type: Boolean, required: false }\n  },\n  emits: [\"update:modelValue\"],\n  setup(__props, { emit: __emit }) {\n    const props = __props;\n    const emit = __emit;\n    const root = ref(null);\n    let fileInput = null;\n    function onFileChange(e) {\n      const files = Array.from(e.target.files);\n      if (files.length > 0) {\n        emit(\"update:modelValue\", files);\n      }\n      destroyFileInput();\n      createFileInput();\n    }\n    function createFileInput() {\n      fileInput = document.createElement(\"input\");\n      fileInput.type = \"file\";\n      fileInput.style.display = \"none\";\n      fileInput.accept = props.accept;\n      fileInput.addEventListener(\"change\", onFileChange);\n      root.value.appendChild(fileInput);\n    }\n    function destroyFileInput() {\n      if (fileInput) {\n        fileInput.removeEventListener(\"change\", onFileChange);\n        fileInput.remove();\n        fileInput = null;\n      }\n    }\n    onMounted(() => {\n      createFileInput();\n    });\n    onUnmounted(() => {\n      destroyFileInput();\n    });\n    function dragOver(e) {\n      e.preventDefault();\n      root.value.classList.add(\"drag-over\");\n    }\n    function dragLeave(e) {\n      e.preventDefault();\n      root.value.classList.remove(\"drag-over\");\n    }\n    function drop(e) {\n      e.preventDefault();\n      root.value.classList.remove(\"drag-over\");\n      const files = Array.from(e.dataTransfer.files);\n      if (files.length > 0) {\n        emit(\"update:modelValue\", files);\n      }\n    }\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\n        \"div\",\n        {\n          class: \"file-input\",\n          ref_key: \"root\",\n          ref: root,\n          onClick: _cache[0] || (_cache[0] = ($event) => _unref(fileInput).click()),\n          onDragover: dragOver,\n          onDragleave: dragLeave,\n          onDrop: drop\n        },\n        [\n          !_ctx.loading ? (_openBlock(), _createElementBlock(\n            \"div\",\n            _hoisted_1,\n            _toDisplayString(_ctx.label),\n            1\n            /* TEXT */\n          )) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n            _createCommentVNode(' <v-progress-circular indeterminate :size=\"18\" /> '),\n            _cache[1] || (_cache[1] = _createTextVNode(\" Uploading \"))\n          ]))\n        ],\n        544\n        /* NEED_HYDRATION, NEED_PATCH */\n      );\n    };\n  }\n});\n;\nreturn fullComponent;})()\n    };\n    function loadComponentTurbobuilt(importPath) {\n        return importedModulesTurbobuilt[importPath];\n    }\n\nconst { defineComponent: _defineComponent } = Vue;\nconst { openBlock: _openBlock, createBlock: _createBlock, createCommentVNode: _createCommentVNode, renderList: _renderList, Fragment: _Fragment, createElementBlock: _createElementBlock, toDisplayString: _toDisplayString, normalizeClass: _normalizeClass, unref: _unref, createElementVNode: _createElementVNode, withModifiers: _withModifiers, normalizeStyle: _normalizeStyle, vShow: _vShow, withDirectives: _withDirectives } = Vue;\nconst _hoisted_1 = { class: \"upload-images-component\" };\nconst _hoisted_2 = { key: 1 };\nconst _hoisted_3 = { key: 0 };\nconst _hoisted_4 = { key: 1 };\nconst _hoisted_5 = { key: 2 };\nconst _hoisted_6 = [\"onMousedown\"];\nconst _hoisted_7 = [\"src\"];\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = { class: \"resizing-notice-bg\" };\nconst { reactive, ref, watch } = Vue;\nlet FileInput = loadComponentTurbobuilt(\"FileInput.vue\");;\nconst fullComponent = /* @__PURE__ */ _defineComponent({\n  __name: \"Media\",\n  props: {\n    modelValue: { type: null, required: true },\n    maxWidth: { type: Number, required: false },\n    maxHeight: { type: Number, required: false }\n  },\n  emits: [\"update:modelValue\", \"save\"],\n  setup(__props, { emit: __emit }) {\n    const tools = Object.assign({ workspaceGuid: \"src\", filePath: { \"path\": \"src/lib/compiler/clientComponents/Media.vue\" }.path }, window.turbobuiltTools);\n    ;\n    const props = __props;\n    const emit = __emit;\n    const d = reactive({\n      files: [],\n      resizing: false,\n      uploadProgress: [],\n      preparingUpload: false,\n      uploads: [],\n      loading: false,\n      draggingIndex: null,\n      draggedPos: { x: 0, y: 0 },\n      currentDraggedOverIndex: null,\n      currentDraggedItemWidth: 0\n    });\n    async function getImageData(file) {\n      if (file.name.match(/\\.heic$/i)) {\n        const libheif = await import(\"https://cdn.jsdelivr.net/npm/libheif-js@1.17.1/libheif-wasm/libheif-bundle.mjs\");\n        const decoder = new (libheif.default()).HeifDecoder();\n        const data = decoder.decode(await file.arrayBuffer());\n        const image = data[0];\n        const width = image.get_width();\n        const height = image.get_height();\n        const canvas2 = document.createElement(\"canvas\");\n        canvas2.width = width;\n        canvas2.height = height;\n        const ctx2 = canvas2.getContext(\"2d\");\n        const imageData = ctx2.createImageData(width, height);\n        await new Promise((resolve, reject) => {\n          image.display(imageData, (displayData) => {\n            if (!displayData) {\n              return reject(new Error(\"HEIF processing error\"));\n            }\n            resolve(displayData);\n          });\n        });\n        ctx2.putImageData(imageData, 0, 0);\n        return ctx2.getImageData(0, 0, width, height);\n      }\n      let canvas = document.createElement(\"canvas\");\n      let ctx = canvas.getContext(\"2d\");\n      let img = new Image();\n      img.src = URL.createObjectURL(file);\n      await new Promise((resolve) => img.onload = resolve);\n      canvas.width = img.width;\n      canvas.height = img.height;\n      ctx.drawImage(img, 0, 0);\n      return ctx.getImageData(0, 0, img.width, img.height);\n    }\n    function getDimensions(originalWidth, originalHeight, maxWidth, maxHeight) {\n      const ratio = Math.min(maxWidth / originalWidth, maxHeight / originalHeight);\n      return { width: originalWidth * ratio, height: originalHeight * ratio };\n    }\n    async function resizeImages(files) {\n      let resizedFiles = [];\n      for (let file of files) {\n        let data = await getImageData(file);\n        let dimensions = getDimensions(data.width, data.height, props.maxWidth || 1080, props.maxHeight || 1080);\n        const resizer = await import(\"https://cdn.jsdelivr.net/npm/@jsquash/resize@2.1.0/index.min.js\");\n        let resized = await resizer.default(data, dimensions);\n        let blob = await convertImageToWebP(resized);\n        let newFile = new File([blob], file.name.replace(/\\.[^\\.]{3,4}$/g, \".webp\"), { type: blob.type });\n        resizedFiles.push(newFile);\n      }\n      return resizedFiles;\n    }\n    async function convertImageToWebP(imageData) {\n      const webp = await import(\"https://unpkg.com/@jsquash/webp@1.2.0?module\");\n      const webpBuffer = await webp.encode(imageData, { quality: 75 });\n      return new Blob([webpBuffer], { type: \"image/webp\" });\n    }\n    async function filesChanged(files) {\n      d.resizing = true;\n      try {\n        d.files = await resizeImages(files);\n      } finally {\n        d.resizing = false;\n      }\n      uploadFiles(d.files);\n    }\n    async function getImageSize(file) {\n      return new Promise((resolve, reject) => {\n        let img = new Image();\n        img.onload = () => resolve({ width: img.width, height: img.height });\n        img.onerror = reject;\n        img.src = URL.createObjectURL(file);\n      });\n    }\n    async function uploadFiles(files) {\n      d.uploadProgress = [];\n      d.preparingUpload = true;\n      let result = await tools.util.callMethod(\n        \"upload.getUploadSignedPutUrlList\",\n        [await Promise.all(files.map(async (file) => {\n          let dimensions = await getImageSize(file);\n          return {\n            contentType: file.type,\n            name: file.name,\n            size: file.size,\n            metadata: { width: dimensions.width, height: dimensions.height }\n          };\n        }))]\n      );\n      d.preparingUpload = false;\n      if (result.error) {\n        alert(result.error);\n        return;\n      }\n      let uploadsInfo = result.data;\n      d.uploadProgress = result.data.map((item) => ({ percent: 0, name: item.upload.name }));\n      for (let i = 0; i < uploadsInfo.length; ++i) {\n        let info = uploadsInfo[i];\n        let res = await tools.upload.uploadFilePut(files[i], info.uploadUrl, (percent) => {\n          d.uploadProgress[i].percent = parseFloat(percent.toFixed(2));\n        });\n        if (res.error) {\n          alert(`Error with upload ${i + 1} ${info.upload.name.slice(0, 25)} ${res.error.toString()}`);\n          return;\n        }\n        d.uploadProgress[i].percent = 100;\n      }\n      props.modelValue.push(...result.data.map((uploadData) => ({\n        upload: uploadData.upload.guid,\n        cloudStorageName: uploadData.upload.cloudStorageName\n      })));\n      emit(\"save\");\n      d.uploadProgress = [];\n      getUploads();\n    }\n    watch(() => props.modelValue, async (newVal) => {\n      if (newVal) {\n        getUploads();\n      } else {\n        emit(\"update:modelValue\", reactive([]));\n        d.uploads = [];\n      }\n    }, { immediate: true });\n    async function getUploads() {\n      d.loading = true;\n      let result = await tools.util.callMethod(\"upload.getUploadsForDisplay\", [props.modelValue.map((item) => item.upload)]);\n      d.loading = false;\n      if (result.error) {\n        alert(result.error);\n        return;\n      }\n      result.data.items.sort((a, b) => props.modelValue.findIndex((item) => item.upload === a.guid) - props.modelValue.findIndex((item) => item.upload === b.guid));\n      d.uploads = result.data.items;\n    }\n    async function removeImage(upload) {\n      if (await confirm(JSON.stringify({ title: \"Remove Upload?\", content: \"It will be deleted permanently\" }))) {\n        await tools.util.callMethod(\"upload.deleteUpload\", [upload.guid]);\n        emit(\"update:modelValue\", props.modelValue.filter((item) => item.upload !== upload.guid));\n        emit(\"save\");\n        d.uploads = d.uploads.filter((item) => item.guid !== upload.guid);\n      }\n    }\n    const uploadsList = ref(null);\n    var startX = 0, startY = 0;\n    var lastX = 0, lastY = 0;\n    var mouseOffsetOnDraggedX = 0;\n    var boxes = [];\n    function startDrag(event, upload, index) {\n      if (event.button !== 0)\n        return;\n      boxes = Array.from(uploadsList.value.querySelectorAll(\".upload-container\")).map((item) => item.getBoundingClientRect());\n      d.draggingIndex = index;\n      d.currentDraggedItemWidth = event.target.offsetWidth;\n      d.draggedPos = { x: 0, y: 0 };\n      startX = event.clientX;\n      startY = event.clientY;\n      lastX = event.clientX;\n      lastY = event.clientY;\n      mouseOffsetOnDraggedX = event.clientX - event.target.getBoundingClientRect().left;\n      d.currentDraggedOverIndex = index;\n      d.currentDraggedItemWidth = event.target.offsetWidth;\n      document.addEventListener(\"mousemove\", drag);\n      document.addEventListener(\"mouseup\", endDrag);\n    }\n    function drag(event) {\n      let x = event.clientX - startX;\n      d.draggedPos = { x, y: startY };\n      for (let i = 0; i < boxes.length; ++i) {\n        let rect = boxes[i];\n        if (event.clientX - mouseOffsetOnDraggedX > rect.left && event.clientX - mouseOffsetOnDraggedX < rect.right) {\n          d.currentDraggedOverIndex = i;\n          break;\n        }\n      }\n    }\n    function endDrag(event) {\n      if (d.currentDraggedOverIndex !== null) {\n        let current = props.modelValue.splice(d.draggingIndex, 1)[0];\n        props.modelValue.splice(d.currentDraggedOverIndex, 0, current);\n        console.log(\"spliced\", d.draggingIndex, d.currentDraggedOverIndex);\n        let currentUpload = d.uploads.splice(d.draggingIndex, 1)[0];\n        d.uploads.splice(d.currentDraggedOverIndex, 0, currentUpload);\n      }\n      d.draggingIndex = null;\n      d.draggedPos = { x: 0, y: 0 };\n      d.currentDraggedItemWidth = 0;\n      d.currentDraggedOverIndex = null;\n      document.removeEventListener(\"mousemove\", drag);\n      document.removeEventListener(\"mouseup\", endDrag);\n    }\n    function getTransform(index) {\n      if (d.draggingIndex === index)\n        return \"translateX(\" + d.draggedPos.x + \"px)\";\n      if (index < d.draggingIndex) {\n        if (d.currentDraggedOverIndex <= index)\n          return \"translateX(\" + d.currentDraggedItemWidth + \"px)\";\n      } else if (index >= d.draggingIndex) {\n        if (d.currentDraggedOverIndex >= index)\n          return \"translateX(\" + -d.currentDraggedItemWidth + \"px)\";\n      }\n    }\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n        !d.uploadProgress?.length ? (_openBlock(), _createBlock(FileInput, {\n          key: 0,\n          \"onUpdate:modelValue\": filesChanged,\n          label: \"Click or Drop Images Here\",\n          accept: \"image/*\",\n          loading: d.resizing\n        }, null, 8, [\"loading\"])) : _createCommentVNode(\"v-if\", true),\n        d.uploadProgress.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n          (_openBlock(true), _createElementBlock(\n            _Fragment,\n            null,\n            _renderList(d.uploadProgress, (progress, index) => {\n              return _openBlock(), _createElementBlock(\n                \"div\",\n                {\n                  key: index,\n                  class: _normalizeClass([\"progress-item\", { \"in-progress\": progress }])\n                },\n                [\n                  d.uploadProgress.length > 1 ? (_openBlock(), _createElementBlock(\n                    \"div\",\n                    _hoisted_3,\n                    \"Processing number \" + _toDisplayString(index + 1),\n                    1\n                    /* TEXT */\n                  )) : _createCommentVNode(\"v-if\", true),\n                  progress.percent === 100 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \"Done\")) : (_openBlock(), _createElementBlock(\n                    \"div\",\n                    _hoisted_5,\n                    _toDisplayString(progress.percent ? progress.percent + \"%\" : \"Waiting\"),\n                    1\n                    /* TEXT */\n                  ))\n                ],\n                2\n                /* CLASS */\n              );\n            }),\n            128\n            /* KEYED_FRAGMENT */\n          ))\n        ])) : _createCommentVNode(\"v-if\", true),\n        props.modelValue && d.uploads ? (_openBlock(), _createElementBlock(\n          \"div\",\n          {\n            key: 2,\n            class: \"uploads-list\",\n            ref_key: \"uploadsList\",\n            ref: uploadsList\n          },\n          [\n            (_openBlock(true), _createElementBlock(\n              _Fragment,\n              null,\n              _renderList(d.uploads, (upload, index) => {\n                return _openBlock(), _createElementBlock(\"div\", {\n                  key: upload.guid\n                }, [\n                  _createElementVNode(\"div\", {\n                    class: \"upload-container\",\n                    style: _normalizeStyle({\n                      \"transform\": getTransform(index),\n                      \"transition\": d.draggingIndex === index ? \"none\" : \"transform .1s\",\n                      \"z-index\": d.draggingIndex === index ? 100 : 1\n                    }),\n                    onMousedown: ($event) => startDrag($event, upload, index),\n                    onDragstart: _cache[0] || (_cache[0] = _withModifiers(() => {\n                    }, [\"prevent\"]))\n                  }, [\n                    _createElementVNode(\"img\", {\n                      src: _unref(tools).upload.getUploadUrl(upload)\n                    }, null, 8, _hoisted_7),\n                    _createElementVNode(\"div\", {\n                      class: \"delete-button\",\n                      onClick: ($event) => removeImage(upload)\n                    }, \"\\u2716\\uFE0F\", 8, _hoisted_8)\n                  ], 44, _hoisted_6)\n                ]);\n              }),\n              128\n              /* KEYED_FRAGMENT */\n            ))\n          ],\n          512\n          /* NEED_PATCH */\n        )) : _createCommentVNode(\"v-if\", true),\n        _withDirectives(_createElementVNode(\n          \"div\",\n          _hoisted_9,\n          _cache[1] || (_cache[1] = [\n            _createElementVNode(\n              \"div\",\n              { style: { \"padding\": \"15px\" } },\n              \"Resizing\",\n              -1\n              /* HOISTED */\n            )\n          ]),\n          512\n          /* NEED_PATCH */\n        ), [\n          [_vShow, d.resizing]\n        ])\n      ]);\n    };\n  }\n});\n","css":".upload-images-component .dragged-over {\n  margin-left: 50px;\n}\n.upload-images-component .progress-item {\n  padding: 10px;\n  text-align: center;\n  width: 100px;\n}\n.upload-images-component .resizing-notice-bg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.1);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.upload-images-component .resizing-notice-bg > div {\n  padding: 10px;\n  background: white;\n}\n.upload-images-component .uploads-list {\n  margin-top: 10px;\n  height: 150px;\n  display: flex;\n  overflow-x: auto;\n  box-shadow: inset -2px 0 3px gray;\n}\n.upload-images-component .uploads-list > * {\n  margin: 10px;\n}\n.upload-images-component .upload-container {\n  position: relative;\n  height: 100%;\n}\n.upload-images-component .upload-container > img {\n  height: 100%;\n}\n.upload-images-component .upload-container .delete-button {\n  position: absolute;\n  z-index: 10;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: -10px;\n  right: -10px;\n  background: white;\n  border-radius: -10px;\n  height: 20px;\n  width: 20px;\n  cursor: pointer;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);\n  transition: 0.1s all;\n}\n.upload-images-component .upload-container .delete-button:hover {\n  background: gainsboro;\n}\n.file-input {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 50px;\n  min-width: 200px;\n  cursor: pointer;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  padding: 10px;\n  background-color: #f9f9f9;\n  color: #666;\n  font-size: 14px;\n  font-weight: 500;\n  transition: all 0.1s;\n}\n.file-input.drag-over {\n  background-color: #f0f0f0;\n}\n"}