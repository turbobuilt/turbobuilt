{"js":"const { defineComponent: _defineComponent } = Vue;\nconst { openBlock: _openBlock, createElementBlock: _createElementBlock } = Vue;\nconst _hoisted_1 = [\"modelValue\"];\nconst { ref, watch, onMounted } = Vue;\nconst fullComponent = /* @__PURE__ */ _defineComponent({\n  __name: \"Text\",\n  props: {\n    modelValue: { type: String, required: true }\n  },\n  emits: [\"update:modelValue\"],\n  setup(__props, { emit: __emit }) {\n    const props = __props;\n    const emit = __emit;\n    const textareaRef = ref(null);\n    function autoGrow() {\n      console.log(\"GROWING\");\n      if (!textareaRef.value) return;\n      textareaRef.value.style.height = \"auto\";\n      textareaRef.value.style.height = textareaRef.value.scrollHeight + \"px\";\n    }\n    function inputted() {\n      emit(\"update:modelValue\", textareaRef.value?.value);\n      autoGrow();\n    }\n    watch(() => props.modelValue, autoGrow);\n    onMounted(autoGrow);\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"textarea\", {\n        ref_key: \"textareaRef\",\n        ref: textareaRef,\n        modelValue: props.modelValue,\n        onInput: inputted,\n        style: { \"width\": \"100%\", \"overflow\": \"hidden\", \"padding\": \"5px\" }\n      }, null, 40, _hoisted_1);\n    };\n  }\n});\n","css":".bob {\n  color: green;\n}\n"}